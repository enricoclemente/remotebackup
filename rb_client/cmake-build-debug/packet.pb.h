// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
class FilePacket;
class FilePacketDefaultTypeInternal;
extern FilePacketDefaultTypeInternal _FilePacket_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class ServerRequest;
class ServerRequestDefaultTypeInternal;
extern ServerRequestDefaultTypeInternal _ServerRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FilePacket* Arena::CreateMaybeMessage<::FilePacket>(Arena*);
template<> ::Header* Arena::CreateMaybeMessage<::Header>(Arena*);
template<> ::ServerRequest* Arena::CreateMaybeMessage<::ServerRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum FileCommand : int {
  create = 0,
  modify = 1,
  delete_ = 2,
  FileCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FileCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FileCommand_IsValid(int value);
constexpr FileCommand FileCommand_MIN = create;
constexpr FileCommand FileCommand_MAX = delete_;
constexpr int FileCommand_ARRAYSIZE = FileCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileCommand_descriptor();
template<typename T>
inline const std::string& FileCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileCommand_descriptor(), enum_t_value);
}
inline bool FileCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileCommand>(
    FileCommand_descriptor(), name, value);
}
// ===================================================================

class FilePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FilePacket) */ {
 public:
  inline FilePacket() : FilePacket(nullptr) {}
  virtual ~FilePacket();

  FilePacket(const FilePacket& from);
  FilePacket(FilePacket&& from) noexcept
    : FilePacket() {
    *this = ::std::move(from);
  }

  inline FilePacket& operator=(const FilePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePacket& operator=(FilePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePacket& default_instance();

  static inline const FilePacket* internal_default_instance() {
    return reinterpret_cast<const FilePacket*>(
               &_FilePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilePacket& a, FilePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePacket* New() const final {
    return CreateMaybeMessage<FilePacket>(nullptr);
  }

  FilePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePacket& from);
  void MergeFrom(const FilePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FilePacket";
  }
  protected:
  explicit FilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileChunckFieldNumber = 4,
    kPathFieldNumber = 1,
    kFileSizeFieldNumber = 3,
    kCommandFieldNumber = 2,
  };
  // repeated bytes file_chunck = 4;
  int file_chunck_size() const;
  private:
  int _internal_file_chunck_size() const;
  public:
  void clear_file_chunck();
  const std::string& file_chunck(int index) const;
  std::string* mutable_file_chunck(int index);
  void set_file_chunck(int index, const std::string& value);
  void set_file_chunck(int index, std::string&& value);
  void set_file_chunck(int index, const char* value);
  void set_file_chunck(int index, const void* value, size_t size);
  std::string* add_file_chunck();
  void add_file_chunck(const std::string& value);
  void add_file_chunck(std::string&& value);
  void add_file_chunck(const char* value);
  void add_file_chunck(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_chunck() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_chunck();
  private:
  const std::string& _internal_file_chunck(int index) const;
  std::string* _internal_add_file_chunck();
  public:

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int64 file_size = 3;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::int64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .FileCommand command = 2;
  void clear_command();
  ::FileCommand command() const;
  void set_command(::FileCommand value);
  private:
  ::FileCommand _internal_command() const;
  void _internal_set_command(::FileCommand value);
  public:

  // @@protoc_insertion_point(class_scope:FilePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_chunck_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_size_;
  int command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ServerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ServerRequest) */ {
 public:
  inline ServerRequest() : ServerRequest(nullptr) {}
  virtual ~ServerRequest();

  ServerRequest(const ServerRequest& from);
  ServerRequest(ServerRequest&& from) noexcept
    : ServerRequest() {
    *this = ::std::move(from);
  }

  inline ServerRequest& operator=(const ServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerRequest& operator=(ServerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerRequest& default_instance();

  static inline const ServerRequest* internal_default_instance() {
    return reinterpret_cast<const ServerRequest*>(
               &_ServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerRequest& a, ServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerRequest* New() const final {
    return CreateMaybeMessage<ServerRequest>(nullptr);
  }

  ServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerRequest& from);
  void MergeFrom(const ServerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ServerRequest";
  }
  protected:
  explicit ServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilePacket

// string path = 1;
inline void FilePacket::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& FilePacket::path() const {
  // @@protoc_insertion_point(field_get:FilePacket.path)
  return _internal_path();
}
inline void FilePacket::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:FilePacket.path)
}
inline std::string* FilePacket::mutable_path() {
  // @@protoc_insertion_point(field_mutable:FilePacket.path)
  return _internal_mutable_path();
}
inline const std::string& FilePacket::_internal_path() const {
  return path_.Get();
}
inline void FilePacket::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilePacket::set_path(std::string&& value) {
  
  path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FilePacket.path)
}
inline void FilePacket::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FilePacket.path)
}
inline void FilePacket::set_path(const char* value,
    size_t size) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FilePacket.path)
}
inline std::string* FilePacket::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilePacket::release_path() {
  // @@protoc_insertion_point(field_release:FilePacket.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilePacket::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FilePacket.path)
}

// .FileCommand command = 2;
inline void FilePacket::clear_command() {
  command_ = 0;
}
inline ::FileCommand FilePacket::_internal_command() const {
  return static_cast< ::FileCommand >(command_);
}
inline ::FileCommand FilePacket::command() const {
  // @@protoc_insertion_point(field_get:FilePacket.command)
  return _internal_command();
}
inline void FilePacket::_internal_set_command(::FileCommand value) {
  
  command_ = value;
}
inline void FilePacket::set_command(::FileCommand value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:FilePacket.command)
}

// int64 file_size = 3;
inline void FilePacket::clear_file_size() {
  file_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilePacket::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilePacket::file_size() const {
  // @@protoc_insertion_point(field_get:FilePacket.file_size)
  return _internal_file_size();
}
inline void FilePacket::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  file_size_ = value;
}
inline void FilePacket::set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:FilePacket.file_size)
}

// repeated bytes file_chunck = 4;
inline int FilePacket::_internal_file_chunck_size() const {
  return file_chunck_.size();
}
inline int FilePacket::file_chunck_size() const {
  return _internal_file_chunck_size();
}
inline void FilePacket::clear_file_chunck() {
  file_chunck_.Clear();
}
inline std::string* FilePacket::add_file_chunck() {
  // @@protoc_insertion_point(field_add_mutable:FilePacket.file_chunck)
  return _internal_add_file_chunck();
}
inline const std::string& FilePacket::_internal_file_chunck(int index) const {
  return file_chunck_.Get(index);
}
inline const std::string& FilePacket::file_chunck(int index) const {
  // @@protoc_insertion_point(field_get:FilePacket.file_chunck)
  return _internal_file_chunck(index);
}
inline std::string* FilePacket::mutable_file_chunck(int index) {
  // @@protoc_insertion_point(field_mutable:FilePacket.file_chunck)
  return file_chunck_.Mutable(index);
}
inline void FilePacket::set_file_chunck(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FilePacket.file_chunck)
  file_chunck_.Mutable(index)->assign(value);
}
inline void FilePacket::set_file_chunck(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FilePacket.file_chunck)
  file_chunck_.Mutable(index)->assign(std::move(value));
}
inline void FilePacket::set_file_chunck(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_chunck_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FilePacket.file_chunck)
}
inline void FilePacket::set_file_chunck(int index, const void* value, size_t size) {
  file_chunck_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FilePacket.file_chunck)
}
inline std::string* FilePacket::_internal_add_file_chunck() {
  return file_chunck_.Add();
}
inline void FilePacket::add_file_chunck(const std::string& value) {
  file_chunck_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FilePacket.file_chunck)
}
inline void FilePacket::add_file_chunck(std::string&& value) {
  file_chunck_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FilePacket.file_chunck)
}
inline void FilePacket::add_file_chunck(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_chunck_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FilePacket.file_chunck)
}
inline void FilePacket::add_file_chunck(const void* value, size_t size) {
  file_chunck_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FilePacket.file_chunck)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FilePacket::file_chunck() const {
  // @@protoc_insertion_point(field_list:FilePacket.file_chunck)
  return file_chunck_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FilePacket::mutable_file_chunck() {
  // @@protoc_insertion_point(field_mutable_list:FilePacket.file_chunck)
  return &file_chunck_;
}

// -------------------------------------------------------------------

// Header

// -------------------------------------------------------------------

// ServerRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FileCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FileCommand>() {
  return ::FileCommand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
