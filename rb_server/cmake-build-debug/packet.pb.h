// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packet_2eproto;
class FilePacket;
class FilePacketDefaultTypeInternal;
extern FilePacketDefaultTypeInternal _FilePacket_default_instance_;
class FilePacketResponse;
class FilePacketResponseDefaultTypeInternal;
extern FilePacketResponseDefaultTypeInternal _FilePacketResponse_default_instance_;
class ProbeSingleFileRequest;
class ProbeSingleFileRequestDefaultTypeInternal;
extern ProbeSingleFileRequestDefaultTypeInternal _ProbeSingleFileRequest_default_instance_;
class ProbeSingleFileResponse;
class ProbeSingleFileResponseDefaultTypeInternal;
extern ProbeSingleFileResponseDefaultTypeInternal _ProbeSingleFileResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FilePacket* Arena::CreateMaybeMessage<::FilePacket>(Arena*);
template<> ::FilePacketResponse* Arena::CreateMaybeMessage<::FilePacketResponse>(Arena*);
template<> ::ProbeSingleFileRequest* Arena::CreateMaybeMessage<::ProbeSingleFileRequest>(Arena*);
template<> ::ProbeSingleFileResponse* Arena::CreateMaybeMessage<::ProbeSingleFileResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum FilePacket_FileCommand : int {
  FilePacket_FileCommand_CREATE_MODIFY = 0,
  FilePacket_FileCommand_ERASE = 1,
  FilePacket_FileCommand_FilePacket_FileCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FilePacket_FileCommand_FilePacket_FileCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FilePacket_FileCommand_IsValid(int value);
constexpr FilePacket_FileCommand FilePacket_FileCommand_FileCommand_MIN = FilePacket_FileCommand_CREATE_MODIFY;
constexpr FilePacket_FileCommand FilePacket_FileCommand_FileCommand_MAX = FilePacket_FileCommand_ERASE;
constexpr int FilePacket_FileCommand_FileCommand_ARRAYSIZE = FilePacket_FileCommand_FileCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilePacket_FileCommand_descriptor();
template<typename T>
inline const std::string& FilePacket_FileCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FilePacket_FileCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FilePacket_FileCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FilePacket_FileCommand_descriptor(), enum_t_value);
}
inline bool FilePacket_FileCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FilePacket_FileCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FilePacket_FileCommand>(
    FilePacket_FileCommand_descriptor(), name, value);
}
// ===================================================================

class FilePacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FilePacket) */ {
 public:
  inline FilePacket() : FilePacket(nullptr) {}
  virtual ~FilePacket();

  FilePacket(const FilePacket& from);
  FilePacket(FilePacket&& from) noexcept
    : FilePacket() {
    *this = ::std::move(from);
  }

  inline FilePacket& operator=(const FilePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePacket& operator=(FilePacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePacket& default_instance();

  static inline const FilePacket* internal_default_instance() {
    return reinterpret_cast<const FilePacket*>(
               &_FilePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilePacket& a, FilePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePacket* New() const final {
    return CreateMaybeMessage<FilePacket>(nullptr);
  }

  FilePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePacket& from);
  void MergeFrom(const FilePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FilePacket";
  }
  protected:
  explicit FilePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FilePacket_FileCommand FileCommand;
  static constexpr FileCommand CREATE_MODIFY =
    FilePacket_FileCommand_CREATE_MODIFY;
  static constexpr FileCommand ERASE =
    FilePacket_FileCommand_ERASE;
  static inline bool FileCommand_IsValid(int value) {
    return FilePacket_FileCommand_IsValid(value);
  }
  static constexpr FileCommand FileCommand_MIN =
    FilePacket_FileCommand_FileCommand_MIN;
  static constexpr FileCommand FileCommand_MAX =
    FilePacket_FileCommand_FileCommand_MAX;
  static constexpr int FileCommand_ARRAYSIZE =
    FilePacket_FileCommand_FileCommand_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FileCommand_descriptor() {
    return FilePacket_FileCommand_descriptor();
  }
  template<typename T>
  static inline const std::string& FileCommand_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FileCommand>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FileCommand_Name.");
    return FilePacket_FileCommand_Name(enum_t_value);
  }
  static inline bool FileCommand_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FileCommand* value) {
    return FilePacket_FileCommand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileChuncksFieldNumber = 4,
    kFilePathFieldNumber = 1,
    kFileSizeFieldNumber = 3,
    kCommandFieldNumber = 2,
    kFileChecksumFieldNumber = 6,
    kFileLastWriteTimeFieldNumber = 5,
  };
  // repeated bytes file_chuncks = 4;
  int file_chuncks_size() const;
  private:
  int _internal_file_chuncks_size() const;
  public:
  void clear_file_chuncks();
  const std::string& file_chuncks(int index) const;
  std::string* mutable_file_chuncks(int index);
  void set_file_chuncks(int index, const std::string& value);
  void set_file_chuncks(int index, std::string&& value);
  void set_file_chuncks(int index, const char* value);
  void set_file_chuncks(int index, const void* value, size_t size);
  std::string* add_file_chuncks();
  void add_file_chuncks(const std::string& value);
  void add_file_chuncks(std::string&& value);
  void add_file_chuncks(const char* value);
  void add_file_chuncks(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_chuncks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_chuncks();
  private:
  const std::string& _internal_file_chuncks(int index) const;
  std::string* _internal_add_file_chuncks();
  public:

  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // int64 file_size = 3;
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::int64 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .FilePacket.FileCommand command = 2;
  void clear_command();
  ::FilePacket_FileCommand command() const;
  void set_command(::FilePacket_FileCommand value);
  private:
  ::FilePacket_FileCommand _internal_command() const;
  void _internal_set_command(::FilePacket_FileCommand value);
  public:

  // uint32 file_checksum = 6;
  void clear_file_checksum();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_checksum() const;
  void set_file_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_checksum() const;
  void _internal_set_file_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 file_last_write_time = 5;
  void clear_file_last_write_time();
  ::PROTOBUF_NAMESPACE_ID::int64 file_last_write_time() const;
  void set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_last_write_time() const;
  void _internal_set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:FilePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_chuncks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_size_;
  int command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_checksum_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_last_write_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class FilePacketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FilePacketResponse) */ {
 public:
  inline FilePacketResponse() : FilePacketResponse(nullptr) {}
  virtual ~FilePacketResponse();

  FilePacketResponse(const FilePacketResponse& from);
  FilePacketResponse(FilePacketResponse&& from) noexcept
    : FilePacketResponse() {
    *this = ::std::move(from);
  }

  inline FilePacketResponse& operator=(const FilePacketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilePacketResponse& operator=(FilePacketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilePacketResponse& default_instance();

  static inline const FilePacketResponse* internal_default_instance() {
    return reinterpret_cast<const FilePacketResponse*>(
               &_FilePacketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FilePacketResponse& a, FilePacketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FilePacketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilePacketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilePacketResponse* New() const final {
    return CreateMaybeMessage<FilePacketResponse>(nullptr);
  }

  FilePacketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilePacketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilePacketResponse& from);
  void MergeFrom(const FilePacketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilePacketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FilePacketResponse";
  }
  protected:
  explicit FilePacketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FilePacketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ProbeSingleFileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProbeSingleFileRequest) */ {
 public:
  inline ProbeSingleFileRequest() : ProbeSingleFileRequest(nullptr) {}
  virtual ~ProbeSingleFileRequest();

  ProbeSingleFileRequest(const ProbeSingleFileRequest& from);
  ProbeSingleFileRequest(ProbeSingleFileRequest&& from) noexcept
    : ProbeSingleFileRequest() {
    *this = ::std::move(from);
  }

  inline ProbeSingleFileRequest& operator=(const ProbeSingleFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeSingleFileRequest& operator=(ProbeSingleFileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeSingleFileRequest& default_instance();

  static inline const ProbeSingleFileRequest* internal_default_instance() {
    return reinterpret_cast<const ProbeSingleFileRequest*>(
               &_ProbeSingleFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProbeSingleFileRequest& a, ProbeSingleFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeSingleFileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbeSingleFileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeSingleFileRequest* New() const final {
    return CreateMaybeMessage<ProbeSingleFileRequest>(nullptr);
  }

  ProbeSingleFileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeSingleFileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeSingleFileRequest& from);
  void MergeFrom(const ProbeSingleFileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeSingleFileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProbeSingleFileRequest";
  }
  protected:
  explicit ProbeSingleFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kFileLastWriteTimeFieldNumber = 2,
  };
  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // int64 file_last_write_time = 2;
  void clear_file_last_write_time();
  ::PROTOBUF_NAMESPACE_ID::int64 file_last_write_time() const;
  void set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_file_last_write_time() const;
  void _internal_set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ProbeSingleFileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::int64 file_last_write_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// -------------------------------------------------------------------

class ProbeSingleFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProbeSingleFileResponse) */ {
 public:
  inline ProbeSingleFileResponse() : ProbeSingleFileResponse(nullptr) {}
  virtual ~ProbeSingleFileResponse();

  ProbeSingleFileResponse(const ProbeSingleFileResponse& from);
  ProbeSingleFileResponse(ProbeSingleFileResponse&& from) noexcept
    : ProbeSingleFileResponse() {
    *this = ::std::move(from);
  }

  inline ProbeSingleFileResponse& operator=(const ProbeSingleFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProbeSingleFileResponse& operator=(ProbeSingleFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProbeSingleFileResponse& default_instance();

  static inline const ProbeSingleFileResponse* internal_default_instance() {
    return reinterpret_cast<const ProbeSingleFileResponse*>(
               &_ProbeSingleFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProbeSingleFileResponse& a, ProbeSingleFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProbeSingleFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProbeSingleFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProbeSingleFileResponse* New() const final {
    return CreateMaybeMessage<ProbeSingleFileResponse>(nullptr);
  }

  ProbeSingleFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProbeSingleFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProbeSingleFileResponse& from);
  void MergeFrom(const ProbeSingleFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProbeSingleFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProbeSingleFileResponse";
  }
  protected:
  explicit ProbeSingleFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packet_2eproto);
    return ::descriptor_table_packet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
    kSendFileFieldNumber = 2,
  };
  // string file_path = 1;
  void clear_file_path();
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // bool send_file = 2;
  void clear_send_file();
  bool send_file() const;
  void set_send_file(bool value);
  private:
  bool _internal_send_file() const;
  void _internal_set_send_file(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProbeSingleFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  bool send_file_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilePacket

// string file_path = 1;
inline void FilePacket::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& FilePacket::file_path() const {
  // @@protoc_insertion_point(field_get:FilePacket.file_path)
  return _internal_file_path();
}
inline void FilePacket::set_file_path(const std::string& value) {
  _internal_set_file_path(value);
  // @@protoc_insertion_point(field_set:FilePacket.file_path)
}
inline std::string* FilePacket::mutable_file_path() {
  // @@protoc_insertion_point(field_mutable:FilePacket.file_path)
  return _internal_mutable_file_path();
}
inline const std::string& FilePacket::_internal_file_path() const {
  return file_path_.Get();
}
inline void FilePacket::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilePacket::set_file_path(std::string&& value) {
  
  file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FilePacket.file_path)
}
inline void FilePacket::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FilePacket.file_path)
}
inline void FilePacket::set_file_path(const char* value,
    size_t size) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FilePacket.file_path)
}
inline std::string* FilePacket::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilePacket::release_file_path() {
  // @@protoc_insertion_point(field_release:FilePacket.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilePacket::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FilePacket.file_path)
}

// .FilePacket.FileCommand command = 2;
inline void FilePacket::clear_command() {
  command_ = 0;
}
inline ::FilePacket_FileCommand FilePacket::_internal_command() const {
  return static_cast< ::FilePacket_FileCommand >(command_);
}
inline ::FilePacket_FileCommand FilePacket::command() const {
  // @@protoc_insertion_point(field_get:FilePacket.command)
  return _internal_command();
}
inline void FilePacket::_internal_set_command(::FilePacket_FileCommand value) {
  
  command_ = value;
}
inline void FilePacket::set_command(::FilePacket_FileCommand value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:FilePacket.command)
}

// int64 file_size = 3;
inline void FilePacket::clear_file_size() {
  file_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilePacket::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilePacket::file_size() const {
  // @@protoc_insertion_point(field_get:FilePacket.file_size)
  return _internal_file_size();
}
inline void FilePacket::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  file_size_ = value;
}
inline void FilePacket::set_file_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:FilePacket.file_size)
}

// repeated bytes file_chuncks = 4;
inline int FilePacket::_internal_file_chuncks_size() const {
  return file_chuncks_.size();
}
inline int FilePacket::file_chuncks_size() const {
  return _internal_file_chuncks_size();
}
inline void FilePacket::clear_file_chuncks() {
  file_chuncks_.Clear();
}
inline std::string* FilePacket::add_file_chuncks() {
  // @@protoc_insertion_point(field_add_mutable:FilePacket.file_chuncks)
  return _internal_add_file_chuncks();
}
inline const std::string& FilePacket::_internal_file_chuncks(int index) const {
  return file_chuncks_.Get(index);
}
inline const std::string& FilePacket::file_chuncks(int index) const {
  // @@protoc_insertion_point(field_get:FilePacket.file_chuncks)
  return _internal_file_chuncks(index);
}
inline std::string* FilePacket::mutable_file_chuncks(int index) {
  // @@protoc_insertion_point(field_mutable:FilePacket.file_chuncks)
  return file_chuncks_.Mutable(index);
}
inline void FilePacket::set_file_chuncks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:FilePacket.file_chuncks)
  file_chuncks_.Mutable(index)->assign(value);
}
inline void FilePacket::set_file_chuncks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:FilePacket.file_chuncks)
  file_chuncks_.Mutable(index)->assign(std::move(value));
}
inline void FilePacket::set_file_chuncks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_chuncks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:FilePacket.file_chuncks)
}
inline void FilePacket::set_file_chuncks(int index, const void* value, size_t size) {
  file_chuncks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:FilePacket.file_chuncks)
}
inline std::string* FilePacket::_internal_add_file_chuncks() {
  return file_chuncks_.Add();
}
inline void FilePacket::add_file_chuncks(const std::string& value) {
  file_chuncks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:FilePacket.file_chuncks)
}
inline void FilePacket::add_file_chuncks(std::string&& value) {
  file_chuncks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:FilePacket.file_chuncks)
}
inline void FilePacket::add_file_chuncks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_chuncks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:FilePacket.file_chuncks)
}
inline void FilePacket::add_file_chuncks(const void* value, size_t size) {
  file_chuncks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:FilePacket.file_chuncks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FilePacket::file_chuncks() const {
  // @@protoc_insertion_point(field_list:FilePacket.file_chuncks)
  return file_chuncks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FilePacket::mutable_file_chuncks() {
  // @@protoc_insertion_point(field_mutable_list:FilePacket.file_chuncks)
  return &file_chuncks_;
}

// int64 file_last_write_time = 5;
inline void FilePacket::clear_file_last_write_time() {
  file_last_write_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilePacket::_internal_file_last_write_time() const {
  return file_last_write_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FilePacket::file_last_write_time() const {
  // @@protoc_insertion_point(field_get:FilePacket.file_last_write_time)
  return _internal_file_last_write_time();
}
inline void FilePacket::_internal_set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  file_last_write_time_ = value;
}
inline void FilePacket::set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_last_write_time(value);
  // @@protoc_insertion_point(field_set:FilePacket.file_last_write_time)
}

// uint32 file_checksum = 6;
inline void FilePacket::clear_file_checksum() {
  file_checksum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilePacket::_internal_file_checksum() const {
  return file_checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FilePacket::file_checksum() const {
  // @@protoc_insertion_point(field_get:FilePacket.file_checksum)
  return _internal_file_checksum();
}
inline void FilePacket::_internal_set_file_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  file_checksum_ = value;
}
inline void FilePacket::set_file_checksum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_checksum(value);
  // @@protoc_insertion_point(field_set:FilePacket.file_checksum)
}

// -------------------------------------------------------------------

// FilePacketResponse

// string file_path = 1;
inline void FilePacketResponse::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& FilePacketResponse::file_path() const {
  // @@protoc_insertion_point(field_get:FilePacketResponse.file_path)
  return _internal_file_path();
}
inline void FilePacketResponse::set_file_path(const std::string& value) {
  _internal_set_file_path(value);
  // @@protoc_insertion_point(field_set:FilePacketResponse.file_path)
}
inline std::string* FilePacketResponse::mutable_file_path() {
  // @@protoc_insertion_point(field_mutable:FilePacketResponse.file_path)
  return _internal_mutable_file_path();
}
inline const std::string& FilePacketResponse::_internal_file_path() const {
  return file_path_.Get();
}
inline void FilePacketResponse::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FilePacketResponse::set_file_path(std::string&& value) {
  
  file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FilePacketResponse.file_path)
}
inline void FilePacketResponse::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:FilePacketResponse.file_path)
}
inline void FilePacketResponse::set_file_path(const char* value,
    size_t size) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FilePacketResponse.file_path)
}
inline std::string* FilePacketResponse::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FilePacketResponse::release_file_path() {
  // @@protoc_insertion_point(field_release:FilePacketResponse.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilePacketResponse::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FilePacketResponse.file_path)
}

// bool success = 2;
inline void FilePacketResponse::clear_success() {
  success_ = false;
}
inline bool FilePacketResponse::_internal_success() const {
  return success_;
}
inline bool FilePacketResponse::success() const {
  // @@protoc_insertion_point(field_get:FilePacketResponse.success)
  return _internal_success();
}
inline void FilePacketResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void FilePacketResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:FilePacketResponse.success)
}

// -------------------------------------------------------------------

// ProbeSingleFileRequest

// string file_path = 1;
inline void ProbeSingleFileRequest::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& ProbeSingleFileRequest::file_path() const {
  // @@protoc_insertion_point(field_get:ProbeSingleFileRequest.file_path)
  return _internal_file_path();
}
inline void ProbeSingleFileRequest::set_file_path(const std::string& value) {
  _internal_set_file_path(value);
  // @@protoc_insertion_point(field_set:ProbeSingleFileRequest.file_path)
}
inline std::string* ProbeSingleFileRequest::mutable_file_path() {
  // @@protoc_insertion_point(field_mutable:ProbeSingleFileRequest.file_path)
  return _internal_mutable_file_path();
}
inline const std::string& ProbeSingleFileRequest::_internal_file_path() const {
  return file_path_.Get();
}
inline void ProbeSingleFileRequest::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProbeSingleFileRequest::set_file_path(std::string&& value) {
  
  file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProbeSingleFileRequest.file_path)
}
inline void ProbeSingleFileRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProbeSingleFileRequest.file_path)
}
inline void ProbeSingleFileRequest::set_file_path(const char* value,
    size_t size) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProbeSingleFileRequest.file_path)
}
inline std::string* ProbeSingleFileRequest::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProbeSingleFileRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:ProbeSingleFileRequest.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProbeSingleFileRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProbeSingleFileRequest.file_path)
}

// int64 file_last_write_time = 2;
inline void ProbeSingleFileRequest::clear_file_last_write_time() {
  file_last_write_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProbeSingleFileRequest::_internal_file_last_write_time() const {
  return file_last_write_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProbeSingleFileRequest::file_last_write_time() const {
  // @@protoc_insertion_point(field_get:ProbeSingleFileRequest.file_last_write_time)
  return _internal_file_last_write_time();
}
inline void ProbeSingleFileRequest::_internal_set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  file_last_write_time_ = value;
}
inline void ProbeSingleFileRequest::set_file_last_write_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_file_last_write_time(value);
  // @@protoc_insertion_point(field_set:ProbeSingleFileRequest.file_last_write_time)
}

// -------------------------------------------------------------------

// ProbeSingleFileResponse

// string file_path = 1;
inline void ProbeSingleFileResponse::clear_file_path() {
  file_path_.ClearToEmpty();
}
inline const std::string& ProbeSingleFileResponse::file_path() const {
  // @@protoc_insertion_point(field_get:ProbeSingleFileResponse.file_path)
  return _internal_file_path();
}
inline void ProbeSingleFileResponse::set_file_path(const std::string& value) {
  _internal_set_file_path(value);
  // @@protoc_insertion_point(field_set:ProbeSingleFileResponse.file_path)
}
inline std::string* ProbeSingleFileResponse::mutable_file_path() {
  // @@protoc_insertion_point(field_mutable:ProbeSingleFileResponse.file_path)
  return _internal_mutable_file_path();
}
inline const std::string& ProbeSingleFileResponse::_internal_file_path() const {
  return file_path_.Get();
}
inline void ProbeSingleFileResponse::_internal_set_file_path(const std::string& value) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ProbeSingleFileResponse::set_file_path(std::string&& value) {
  
  file_path_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ProbeSingleFileResponse.file_path)
}
inline void ProbeSingleFileResponse::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ProbeSingleFileResponse.file_path)
}
inline void ProbeSingleFileResponse::set_file_path(const char* value,
    size_t size) {
  
  file_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ProbeSingleFileResponse.file_path)
}
inline std::string* ProbeSingleFileResponse::_internal_mutable_file_path() {
  
  return file_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ProbeSingleFileResponse::release_file_path() {
  // @@protoc_insertion_point(field_release:ProbeSingleFileResponse.file_path)
  return file_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProbeSingleFileResponse::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ProbeSingleFileResponse.file_path)
}

// bool send_file = 2;
inline void ProbeSingleFileResponse::clear_send_file() {
  send_file_ = false;
}
inline bool ProbeSingleFileResponse::_internal_send_file() const {
  return send_file_;
}
inline bool ProbeSingleFileResponse::send_file() const {
  // @@protoc_insertion_point(field_get:ProbeSingleFileResponse.send_file)
  return _internal_send_file();
}
inline void ProbeSingleFileResponse::_internal_set_send_file(bool value) {
  
  send_file_ = value;
}
inline void ProbeSingleFileResponse::set_send_file(bool value) {
  _internal_set_send_file(value);
  // @@protoc_insertion_point(field_set:ProbeSingleFileResponse.send_file)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::FilePacket_FileCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FilePacket_FileCommand>() {
  return ::FilePacket_FileCommand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packet_2eproto
